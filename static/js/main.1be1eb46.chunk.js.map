{"version":3,"sources":["Components/TodoList/ToDoListItem.jsx","Components/TodoList/ToDoList.jsx","Components/AddToDoForm/AddToDoForm.jsx","App.jsx","index.jsx"],"names":["TodoListItem","onRemove","_this$props","_this","props","todo","id","onUpdate","_this$props2","done","this","Style","text","completed","textDecoration","active","button","react_default","a","createElement","List","Item","key","index","Content","style","Button","floated","onClick","circular","color","React","Component","TodoList","renderList","todos","map","ToDoListItem","renderEmptyList","Container","textAlign","renderedList","length","fluid","selection","verticalAlign","AddToDoForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","e","target","value","setState","onSubmit","preventDefault","state","addToDo","Form","Group","Input","placeholder","required","width","App","newToDo","Date","getTime","_","random","push","removeToDo","remove","updateToDo","updatedToDo","findIndex","Number","isInteger","className","Grid","centered","columns","Column","Segment","attached","Components_AddToDoForm_AddToDoForm","raised","stacked","ToDoList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1be1eb46.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  List,\n  Button,\n} from 'semantic-ui-react';\n\n\nclass TodoListItem extends React.Component {\n  onRemove = () => {\n    // destructure props\n    const {\n      onRemove,\n      todo: { id },\n    } = this.props;\n\n    // remove todo item from state\n    onRemove(id);\n  };\n\n  onUpdate = () => {\n    const {\n      onUpdate,\n      todo,\n    } = this.props;\n\n    // change done status\n    todo.done = !todo.done;\n\n    // update todo item from state\n    onUpdate(todo.id, todo);\n  };\n\n  render() {\n    // get todo object from props\n    const { todo } = this.props;\n\n    // Style object for todo status\n    const Style = {\n      text: {\n        completed: {\n          textDecoration: 'line-through',\n        },\n        active: {\n          textDecoration: 'none',\n        },\n      },\n      button: {\n        completed: 'google plus',\n        active: 'green',\n      },\n    };\n\n    return (\n      <List.Item key={todo.id} index={todo.id}>\n        <List.Content\n          style={todo.done ? Style.text.completed : Style.text.active}\n        >\n          {todo.text}\n          <Button\n            floated=\"right\"\n            onClick={this.onRemove}\n            circular\n            color=\"google plus\"\n          >\n            -\n          </Button>\n          <Button\n            floated=\"right\"\n            circular\n            onClick={this.onUpdate}\n            color={todo.done ? Style.button.completed : Style.button.active}\n          >\n            {todo.done ? 'Undone' : 'Done'}\n          </Button>\n\n        </List.Content>\n      </List.Item>\n    );\n  }\n}\n\nTodoListItem.propTypes = {\n  todo: PropTypes.instanceOf(Object).isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n};\n\nexport default TodoListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  List,\n  Container,\n} from 'semantic-ui-react';\nimport TodoListItem from './ToDoListItem';\n\n\nclass TodoList extends React.Component {\n  renderList = todos => todos.map((todo) => {\n    // destructure props\n    const {\n      onRemove,\n      onUpdate,\n    } = this.props;\n\n    return (\n      <TodoListItem key={todo.id} todo={todo} onRemove={onRemove} onUpdate={onUpdate} />\n    );\n  });\n\n  renderEmptyList = () => (\n    <Container textAlign=\"center\">\n          Add Some Tasks!\n    </Container>\n  );\n\n  render() {\n    // TODO: add react/prop-types to project\n    const { todos } = this.props; // eslint-disable-line react/prop-types\n\n    const renderedList = (!todos || todos.length === 0) ? this.renderEmptyList() : this.renderList(todos);\n\n    return (\n      <List fluid=\"true\" selection verticalAlign=\"middle\">\n        {renderedList}\n      </List>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.instanceOf(Array).isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\n\nclass AddToDoForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // initial state\n    this.state = {\n      text: '',\n    };\n  }\n\n  // update text property in state on every change\n  onChange = (e) => {\n    // get current text from input\n    const text = e.target.value;\n\n    // update state with new text\n    this.setState({\n      text,\n    });\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    // get text object from state and addToDo function from props\n    const { text } = this.state;\n    const { addToDo } = this.props;\n\n    // addToDo object to App's state via inherited function\n    addToDo({\n      text,\n      done: false,\n    });\n\n    // set empty string to text property in component's state after adding ToDo\n    this.setState({\n      text: '',\n    });\n  }\n\n  render() {\n    // get text object from state\n    const { text } = this.state;\n\n    return (\n      <Form onSubmit={this.onSubmit}>\n        <Form.Group>\n          <Form.Input placeholder=\"Add New ToDo\" onChange={this.onChange} value={text} required width={14}></Form.Input>\n          <Form.Button color=\"green\" width={2}>Add</Form.Button>\n        </Form.Group>\n      </Form>\n    );\n  }\n}\n\nAddToDoForm.propTypes = {\n  addToDo: PropTypes.func.isRequired,\n};\n\nexport default AddToDoForm;\n","import React from 'react';\nimport _ from 'lodash';\nimport { Grid, Segment } from 'semantic-ui-react';\nimport TodoList from './Components/TodoList/ToDoList';\nimport AddToDoForm from './Components/AddToDoForm/AddToDoForm';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      todos: [],\n    };\n  }\n\n  addToDo = (newToDo) => {\n    // if newToDo is not object then do nothing\n    if (!newToDo && typeof newToDo !== 'object') return;\n\n    // add an unique id to new todo item\n    newToDo.id = new Date().getTime() + _.random(0, 1000);\n\n    // get a copy of the todos array from state\n    const { todos } = this.state;\n\n    // push new todo item into todos array\n    todos.push(newToDo);\n\n    // set state with new todos array\n    this.setState({\n      todos,\n    });\n  }\n\n  removeToDo = (id) => {\n    // if id is not number then do nothing\n    if (!id && typeof id !== 'number') return;\n\n    // get a copy of the todos array from state\n    const { todos } = this.state;\n\n    // delete todo\n    _.remove(todos, todo => todo.id === id);\n\n    // set state with new todos array\n    this.setState({\n      todos,\n    });\n  }\n\n  updateToDo = (id, updatedToDo) => {\n    // if id is not number then do nothing\n    if (!id && typeof id !== 'number') return;\n\n    // if updatedToDo is not object then do nothing\n    if (!updatedToDo && typeof updatedToDo !== 'object') return;\n\n    // get a copy of the todos array from state\n    const { todos } = this.state;\n\n    // find the index of todo which is wanted to be deleted\n    const index = todos.findIndex(todo => todo.id === id);\n\n    // if index can't be found then do nothing\n    if (!Number.isInteger(index) || !(index >= 0)) return;\n\n    // set id property\n    updatedToDo.id = id;\n\n    // update todo list with updatedToDo\n    todos[index] = updatedToDo;\n\n    // set state with new todos array\n    this.setState({\n      todos,\n    });\n  }\n\n\n  render() {\n    const { todos } = this.state;\n    return (\n      <div className=\"App\">\n        <Grid centered columns=\"2\">\n          <Grid.Column>\n            <Segment attached=\"top\">\n              <AddToDoForm addToDo={this.addToDo} />\n            </Segment>\n            <Segment raised stacked attached=\"bottom\">\n              <TodoList\n                todos={todos}\n                onRemove={this.removeToDo}\n                onUpdate={this.updateToDo}\n              />\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}